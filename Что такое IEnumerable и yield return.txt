—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Что такое IEnumerable?
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Представь, что у тебя есть коробка с игрушками. Когда ты хочешь поиграть с игрушками, ты берёшь одну за другой. 
IEnumerable в программировании — это как раз такая коробка, которая позволяет нам по одному доставать элементы, например, числа или строки, и работать с ними.

Где используется IEnumerable?
IEnumerable чаще всего используется, когда мы хотим перебрать список предметов. 

Это могут быть:
1) Списки (например, список покупателей)
2) Массивы (например, массив чисел)
3) Другие коллекции данных

Как работать с IEnumerable?
Чтобы использовать IEnumerable, мы можем создать коллекцию (например, список) и потом перебрать ее с помощью специальной конструкции, называемой foreach.

Вот простой пример:

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };

        foreach (int number in numbers)
        {
            Console.WriteLine(number); // Выведет каждое число на экран
        }
    }
}

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Что такое yield return?
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Теперь давай поговорим о yield return. Это специальная команда, которая позволяет нам возвращать элементы один за другим, не создавая их всех сразу. 
Это похоже на то, как ты берёшь игрушки из коробки одну за другой, а не вываливаешь их все сразу.

Как это работает?
С помощью yield return мы можем создать метод, который будет возвращать элементы по одному. Например:

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        foreach (int number in GenerateNumbers(5))
        {
            Console.WriteLine(number); // Выведет числа от 0 до 4
        }
    }

    static IEnumerable<int> GenerateNumbers(int count)
    {
        for (int i = 0; i < count; i++)
        {
            yield return i; // Возвращает число и сохраняет состояние метода
        }
    }
}

Как это работает шаг за шагом:
1) Когда ты вызываешь GenerateNumbers(5), метод начинает работать.
2) Как только метод доходит до yield return i, он возвращает текущее число (например, 0) и останавливается.
3) В следующий раз, когда мы будем запрашивать следующее число, выполнение продолжится с этого места, 
    и метод снова вернет следующее число (1, потом 2 и так далее).

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Почему это удобно?
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Использование IEnumerable и yield return позволяет делать код проще и эффективнее. 
Ты не загружаешь все данные в память сразу, а берёшь их по одному, что полезно, если данных очень много.

Источник: ChatGPT